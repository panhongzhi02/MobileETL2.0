package com.taiji.library.greendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.taiji.library.data.cache.Cache;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CACHE".
*/
public class CacheDao extends AbstractDao<Cache, Long> {

    public static final String TABLENAME = "CACHE";

    /**
     * Properties of entity Cache.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CacheName = new Property(1, String.class, "cacheName", false, "CACHE_NAME");
        public final static Property Validity = new Property(2, int.class, "validity", false, "VALIDITY");
        public final static Property LastTime = new Property(3, String.class, "lastTime", false, "LAST_TIME");
    }


    public CacheDao(DaoConfig config) {
        super(config);
    }
    
    public CacheDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CACHE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CACHE_NAME\" TEXT UNIQUE ," + // 1: cacheName
                "\"VALIDITY\" INTEGER NOT NULL ," + // 2: validity
                "\"LAST_TIME\" TEXT);"); // 3: lastTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CACHE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Cache entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cacheName = entity.getCacheName();
        if (cacheName != null) {
            stmt.bindString(2, cacheName);
        }
        stmt.bindLong(3, entity.getValidity());
 
        String lastTime = entity.getLastTime();
        if (lastTime != null) {
            stmt.bindString(4, lastTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Cache entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cacheName = entity.getCacheName();
        if (cacheName != null) {
            stmt.bindString(2, cacheName);
        }
        stmt.bindLong(3, entity.getValidity());
 
        String lastTime = entity.getLastTime();
        if (lastTime != null) {
            stmt.bindString(4, lastTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Cache readEntity(Cursor cursor, int offset) {
        Cache entity = new Cache( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cacheName
            cursor.getInt(offset + 2), // validity
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // lastTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Cache entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCacheName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setValidity(cursor.getInt(offset + 2));
        entity.setLastTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Cache entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Cache entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Cache entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
