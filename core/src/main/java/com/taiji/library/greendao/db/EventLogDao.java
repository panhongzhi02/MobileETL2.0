package com.taiji.library.greendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.taiji.library.greendao.bean.EventLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EVENT_LOG".
*/
public class EventLogDao extends AbstractDao<EventLog, Long> {

    public static final String TABLENAME = "EVENT_LOG";

    /**
     * Properties of entity EventLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Client = new Property(1, String.class, "client", false, "CLIENT");
        public final static Property Version = new Property(2, String.class, "version", false, "VERSION");
        public final static Property DeviceId = new Property(3, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property EventId = new Property(4, String.class, "eventId", false, "EVENT_ID");
        public final static Property PageName = new Property(5, String.class, "pageName", false, "PAGE_NAME");
        public final static Property Time = new Property(6, String.class, "time", false, "TIME");
        public final static Property User = new Property(7, String.class, "user", false, "USER");
    }


    public EventLogDao(DaoConfig config) {
        super(config);
    }
    
    public EventLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EVENT_LOG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CLIENT\" TEXT," + // 1: client
                "\"VERSION\" TEXT," + // 2: version
                "\"DEVICE_ID\" TEXT," + // 3: deviceId
                "\"EVENT_ID\" TEXT," + // 4: eventId
                "\"PAGE_NAME\" TEXT," + // 5: pageName
                "\"TIME\" TEXT," + // 6: time
                "\"USER\" TEXT);"); // 7: user
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EVENT_LOG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EventLog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String client = entity.getClient();
        if (client != null) {
            stmt.bindString(2, client);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(3, version);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(4, deviceId);
        }
 
        String eventId = entity.getEventId();
        if (eventId != null) {
            stmt.bindString(5, eventId);
        }
 
        String pageName = entity.getPageName();
        if (pageName != null) {
            stmt.bindString(6, pageName);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(7, time);
        }
 
        String user = entity.getUser();
        if (user != null) {
            stmt.bindString(8, user);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EventLog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String client = entity.getClient();
        if (client != null) {
            stmt.bindString(2, client);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(3, version);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(4, deviceId);
        }
 
        String eventId = entity.getEventId();
        if (eventId != null) {
            stmt.bindString(5, eventId);
        }
 
        String pageName = entity.getPageName();
        if (pageName != null) {
            stmt.bindString(6, pageName);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(7, time);
        }
 
        String user = entity.getUser();
        if (user != null) {
            stmt.bindString(8, user);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EventLog readEntity(Cursor cursor, int offset) {
        EventLog entity = new EventLog( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // client
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // version
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deviceId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // eventId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pageName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // time
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // user
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EventLog entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setClient(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVersion(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeviceId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEventId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPageName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUser(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EventLog entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EventLog entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EventLog entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
